{"version":3,"sources":["index.js"],"names":["client","WebSocket","Square","props","className","onClick","value","OnOff","onopen","console","log","Board","state","squares","Array","fill","xIsNext","GameStep","On_Off","OnDis","data","result","JSON","parse","this","setState","count","movement","i","slice","OnState","Steps","calculateWinner","send","stringify","username","content","curNext","onmessage","event","newDataJson","newsquares","c","onclose","handleClick","handleOnClick","timerID","setInterval","tick","status","winner","renderSquare","onclick","renderOnOff","React","Component","Game","lines","length","a","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80539d3f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Websocket from 'react-websocket';\n\nimport './index.css';\n\nconst client=new WebSocket('ws://localhost:9001');\nclient.onopen = () => {\n    \t\tconsole.log('open connection');\n}\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }  \nfunction OnOff(props){\n  return(\n    <button  className=\"OnOff\" onClick={props.onClick}>\n    {props.value}\n    </button>\n  )\n}\n  \n  class Board extends React.Component {\n    constructor(props) {   \n         super(props);    \n         this.state = {      \n             squares: Array(9).fill(null),    \n             xIsNext:true,\n            GameStep:0,\n            On_Off:false,\n\t    OnDis:'begin',\n        }; \n    }    \n    handleData(data){\n\tlet result = JSON.parse(data);\n\tthis.setState({count: this.state.count + result.movement});\n    }\n    handleClick(i){\n        const squares=this.state.squares.slice();\n\tconst OnState=this.state.On_Off;\n\tconst Steps=this.state.GameStep;\n\t\n\tif(!OnState){\n\t    return;\n\t}\n        if (calculateWinner(squares) || squares[i]) {      \n            return; \n        }\n        if(Steps===9){\n            return; \n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n\tif(Steps===8){\n\t  this.setState({\n            squares:squares,\n            xIsNext:!this.state.xIsNext,\n\t    GameStep:Steps+1\n            }\n\t  );\n\t}\n\telse{\n\t  client.send(JSON.stringify({\n   \t\tusername: this.state.xIsNext,\n   \t\tcontent: squares\n \t\t}));\n\t  let curNext=true;\n\t  client.onmessage = event => {\n    \t\tconsole.log(event.data);\n\t\tlet newDataJson= JSON.parse(event.data);\n\t\tcurNext=newDataJson[\"username\"];\n\t\tlet newsquares=newDataJson[\"content\"];\n\t\tfor(let i=0;i<9;++i){\n\t\t    squares[i]=newsquares[i];\n\t\t}\n\n\t  }\n          this.setState({\n            squares:squares,\n            xIsNext:curNext,\n\t    GameStep:Steps+2\n            }\n\t  );\n\t}\n        \n    }\n    handleOnClick(c){\n\tconst OnState=this.state.On_Off;\n\tconst squares=this.state.squares.slice();\n\tif(OnState){//结束\n\t  for(let i=0;i<9;++i){\n\t     squares[i]=null;\n\t  }\n\t  client.onclose = () => {\n        \tconsole.log('Close connected')\n    \t  }\n\t  this.setState({\n            squares:squares,\n            xIsNext:true,\n\t    GameStep:0,\n\t    On_Off:false,\n\t    OnDis:'begin',\n          });\t\n\t}\n\telse{//开始\n\t\tclient.onopen = () => {\n    \t\tconsole.log('open connection');\n\t\t}\n\t    this.setState({\n\t      On_Off:true,\n\t      OnDis:'end',\n            });\n\t}\n    }\n    renderSquare(i) {\n      return <Square  \n            value={this.state.squares[i]}\n            onClick={()=>this.handleClick(i)}\n        />;\n    }\n    renderOnOff(c){\n      return <OnOff  \n            value={this.state.OnDis}\n            onClick={()=>this.handleOnClick(c)}\n        />;\n    }\n    componentDidMount() {\n\tthis.timerID = setInterval(\n\t  () => this.tick(),\n      \t  100\n\t);\n    }\n   tick() {\n\tthis.setState({\n        squares:this.state.squares,\n        });\n   }\n\t\n    render() {\n        const winner = calculateWinner(this.state.squares);\n\tconst OnState=this.state.OnOff;    \n        let status; \n        if (winner) {      \n            status = 'Winner: ' + winner;    \n        } \n        else if(this.state.GameStep===9){\n            status = 'It is a draw! ' ;    \n        }\n        else {  \n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');    \n        }\n\t\n  \n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n\t    {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n\t  <div className=\"OnOff\" onclick>\n\t    {this.renderOnOff(false)}\n\t  </div>\n        </div>\n\t\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n    render() {\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board />\n          </div>\n          <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n"],"sourceRoot":""}